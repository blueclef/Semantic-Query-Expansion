import { GoogleGenAI } from "@google/genai";
import { QueryParams, LiteraryForm, StyleConfig } from '../types';

// The API key is injected from the environment.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

function constructPrompt(params: QueryParams): { systemInstruction: string; userPrompt: string } {
    const { prompt, styleConfig, literaryForm } = params;

    const systemInstruction = `You are a world-class literary writer. Your task is to generate a creative piece based on the user's request.
You must follow all instructions, including literary form and stylistic constraints, with absolute precision.
Your output must be only the generated text itself. Do not include any titles (unless requested), preambles, commentary, or explanations.`;

    let formInstruction: string;
    switch(literaryForm) {
        case 'poem': formInstruction = "Write a poem about"; break;
        case 'short-story': formInstruction = "Write a short story about"; break;
        case 'haiku': formInstruction = "Write a haiku (5-7-5 syllables) about"; break;
        case 'limerick': formInstruction = "Write a limerick (AABBA rhyme scheme) about"; break;
        case 'sonnet': formInstruction = "Write a sonnet (14 lines, traditional rhyme scheme) about"; break;
        case 'custom': formInstruction = "Write a piece of prose or poetry about"; break;
        default: formInstruction = "Write a literary piece about";
    }

    let userPrompt = `${formInstruction} "${prompt}".\n\n`;

    if (literaryForm === 'custom') {
        userPrompt += "Adhere strictly to the following stylistic constraints:\n";
        userPrompt += `- Tone: ${styleConfig.tone}\n`;
        userPrompt += `- Sentence Complexity: ${styleConfig.sentenceComplexity}\n`;
        userPrompt += `- Lexical Density: ${styleConfig.lexicalDensity}\n`;
        userPrompt += `- Punctuation Rhythm: ${styleConfig.punctuationRhythm}\n`;
        userPrompt += `- Figurative Language Frequency: ${styleConfig.figurativeFrequency}`;
    }

    return { systemInstruction, userPrompt };
}


export async function generateLiteraryText(params: QueryParams): Promise<string> {
    try {
        const model = 'gemini-2.5-pro';
        const { systemInstruction, userPrompt } = constructPrompt(params);

        const response = await ai.models.generateContent({
            model: model,
            contents: [{ role: 'user', parts: [{ text: userPrompt }] }],
            config: {
                systemInstruction: systemInstruction,
            },
        });

        const text = response.text;
        if (!text) {
            throw new Error("No text generated by the model.");
        }
        return text.trim();

    } catch (error) {
        console.error("Error calling Gemini API:", error);
        if (error instanceof Error && error.message.includes('INTERNAL')) {
             return `Error: The AI model encountered an internal error. This can sometimes be resolved by simplifying the prompt or style constraints. Please try again with a different input.`;
        }
        if (error instanceof Error) {
            return `Error generating text: ${error.message}`;
        }
        return "An unknown error occurred while generating text.";
    }
}